Binary Formats
==============

The general principle is fixed-size fields followed by variable fields (or
field, in this case, generally just the path).

There is versioning in the formats; coal will hopefully remain backwards
compatible.

Offsets are to nearest byte, sizes are in bytes or :bits

All paths are written with a \0 on the end, for ease of copying to buffers.
String length is quoted length - 1

All data chunks are 4-byte aligned - to allow sequential sets to be read in
one buffer, all comms have 4-byte alignment padding on the end.



Binary Packet Types
===================
Type	Meaning
0x02	Ping - request confirmation socket is alive
0x03	Pong - response to a ping
0x04	Data - a data record
0x08	Query - request for data
0x09	Query answer - response containing records
0x10	Tree Query - request for path structure
0x11	Tree answer - response containing nodes
0x12	Search Query - request for matching nodes
0x13	Search Answer - response containing nodes



Ping/Pong Format
================

Offset	Size	Field
0		1		Version
1		1		Type
2		2		Record size (ie size - 4 more bytes to read)
4		4		(time_t) ping timestamp
8		4		(time_t) pong timestamp (0 in a ping)
12		2		(short int) ping msec
14		2		(short int) pong msec




Binary Data Format
==================

Input:

Offset	Size	Field
0		1		Version
1		1		Type
2		2		Record size (ie, size - 4 more bytes to read)
4		4		(time_t) timestamp
8		4		(float) value
12		var		Path (length = record size - 12, capped at 1024)
var		0-3		Padding for 4-byte alignment

Output:

None



Binary Query Format
===================

Input:

Offset   Size     Field
0        1        Version
1        1        Type
2        1        Query type
3        1        Query id
4        4        Record size (ie, size - 4 more bytes to read)
8        4        Start time (ignored in search/tree queries)
12       4        End time (ignored in search/tree queries)
16       1        Metric (ignored for tree queries)
17       1        Padding
18       2        Path length
20       var      Path (size capped at 1024)
var      0-3      Padding for 4-byte alignment


Output (tree query):

Offset   Size     Field
0        1        Version
1        1        Type
2        1        Query type
3        1        Query id
4        4        Record size (ie size - 8 more bytes to read)
8        1        Requested node type (1 = leaf, 0 = branch)
9        1        Padding
10       2        Result count (which we'll call N)
<i = 1 to N times>
12+4i    1        Node type (1 = leaf, 0 = branch)
13+4i    1        Padding
14+4i    2        Path length (capped at 1024)
...
<i = 1 to N times, starting offset X = 12 + 4N, len being sum of path lengths to i>
X+(len)  var      Path
...
var      0-3      Padding for 4-byte alignment




For example (numeric values are hex, leading zeros of single bytes are
left off, ASCII characters are shown)

    00 . . . . . . .08 . . . . . . .10 . . . . . . .18 . . . . . . .20
01   1 3 027 2 0 003 2 0 003 2 0 006 1 0 008 f o o\0 s u b d i r\0 d a
02   t a p a t h\0\0

Note the final \0 byte for 4-byte alignment.


Output (data query):

Offset   Size     Field
0        1        Version
1        1        Type
2        1        Query type
3        1        Query id
4        4        Record size (ie size - 8 more bytes to read)
8        4        Start time of data (might not match query)
12       4        End time of data (might not match query)
16       1        Metric
17       1        Padding
18       2        Path length
20       4        Result count (which we'll call N)
<i = 0 to N-1>
24+12i   4        (time_t) timestamp
28+12i   4        Flags ( 0x1 : valid )
32+12i   4        (float) value
...
24+12N   var      Path
var      0-3      Padding for 4-byte alignment



Output (search query):

Offset   Size     Field
0        1        Version
1        1        Type
2        1        Query type
3        1        Query id
4        4        Record size (ie size - 8 more bytes to read)
8        4        Match count (which we'll call N)
<i = 0 to N-1>
12+2i    2        Path length
...
<i = 0 to N-1>
12+2N    var      Matching path + \0
...
var      0-3      Padding for 4-byte alignment




